/*The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.Given an integer n, return all distinct
solutions to the n-queens puzzle. You may return the answer in any order.*/


class Solution {
    void solve(int col,int n,vector<vector<string>> &ans,vector<string> &board,vector<int> &leftrow,vector<int> &upperd,vector<int> &lowerd){
        if(col==n){
            ans.push_back(board);
            return;
        }

            for(int row=0;row<n;row++){
       if(leftrow[row]==0 && upperd[n-1+col-row]==0 && lowerd[row+col]==0){
           board[row][col]='Q';
           leftrow[row]=1;
           upperd[n-1+col-row]=1;
           lowerd[col+row]=1;
           solve(col+1,n,ans,board,leftrow,upperd,lowerd);
           board[row][col]='.';
           leftrow[row]=0;
           upperd[n-1+col-row]=0;
           lowerd[col+row]=0;

    
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');
        for(int i=0;i<n;i++){
            board[i]=s;
        }
        vector<int> leftrow(n,0),upperd(2*n-1,0),lowerd(2*n-1,0);
        solve(0,n,ans,board,leftrow,upperd,lowerd);
        return ans;
    }
};

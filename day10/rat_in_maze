/*Consider a rat placed at (0, 0) in a square matrix of order N * N. It has to reach the destination at (N - 1, N - 1). Find all possible paths that the rat can take to
reach from source to destination. The directions in which the rat can move are 'U'(up), 'D'(down), 'L' (left), 'R' (right). Value 0 at a cell in the matrix represents that
it is blocked and rat cannot move to it while value 1 at a cell in the matrix represents that rat can be travel through it.*/


class Solution{
    void solve(int i,int j,int drow[],int dcol[],vector<string> &ans,vector<vector<int>> &vis,
   vector<vector<int>> &m,int n,string move){
       if(i==n-1 && j==n-1){
           ans.push_back(move);
           return;
       }
       string dir="DLRU";
       for( int ind=0;ind<4;ind++){
           int nrow=i+drow[ind];
           int ncol=j+dcol[ind];
           if(nrow>=0 && ncol>=0 && ncol<n && nrow<n && !vis[nrow][ncol] && m[nrow][ncol]==1)
{
    vis[i][j]=1;
    solve(nrow,ncol,drow,dcol,ans,vis,m,n,move+dir[ind]);
    vis[i][j]=0;
}           
       }
   }
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> ans;
        vector<vector<int>> vis(n,vector<int>(n,0));
        int drow[]={+1,0,0,-1};
        int dcol[]={0,-1,1,0};
        if(m[0][0]==1) solve(0,0,drow,dcol,ans,vis,m,n,"");
        return ans;
    }
};

    



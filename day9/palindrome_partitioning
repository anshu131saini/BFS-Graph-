{Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.}


class Solution 
{
    bool isPalindrome(string s,int start,int end){
        while(start<=end){
            if(s[start++] != s[end--])
            return false;
        }
        return true;
    }
    void func(int index,vector<vector<string>> &ans,vector<string> &path,string s){
        if(index==s.size()){
            ans.push_back(path);
            return;

        }
        for(int i=index;i<s.size();i++){
            if(isPalindrome(s,index,i)){
                path.push_back(s.substr(index,i-index+1));
                func(i+1,ans,path,s);
                path.pop_back();
            }
        }
    }
public:
    vector<vector<string>> partition(string s) {
        vector<string> path;
        vector<vector<string>> ans;
        func(0,ans,path,s);
        return ans;
    }
};

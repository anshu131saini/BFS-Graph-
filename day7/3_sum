/* Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets */


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
       vector<vector<int>> ans;
       sort(nums.begin(),nums.end());
       for(int i=0;i<nums.size()-2;i++){
           if(i==0 || i>0 && nums[i]!=nums[i-1]){
               int l=i+1,h=nums.size()-1;
               int sum=0-nums[i];
               while(l<h){
                   if(nums[l]+nums[h]==sum){
                       vector<int> temp;
                       temp.push_back(nums[i]);
                       temp.push_back(nums[l]);
                       temp.push_back(nums[h]);
                       ans.push_back(temp);

                       while(l<h && nums[l]==nums[l+1]) l++;
                       while(l<h && nums[h]==nums[h-1]) h--; 
                       l++;
                       h--;
                   }
                   else if(nums[l]+nums[h]<sum) l++;
                   else h--;
               }
           }
       }
       return ans;
    }
};

/* Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.k is a positive integer and is less than or equal to the
length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.You may not alter the values in the list
nodes, only nodes themselves may be changed.*/


class Solution {
        
    
int length(ListNode* head)
    {
        int l=0;
        while(head != NULL)
        {
            head=head->next;
            l++;
        }
        return l;
    }
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
       // int l=length(head);
        if(length(head)<k)
        {
            return head;
        }
        ListNode* curr=head;
                ListNode* prev=NULL;

                ListNode* forward =NULL;
        int count=0;
        while(curr!=NULL && count < k  )
        {
            forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
            count++;
            //l=l-k;
        }
        
            head->next=reverseKGroup(curr,k);
            
        
return prev;
        
    }
};

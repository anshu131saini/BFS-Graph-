/*Given the head of a singly linked list, return true if it is a palindrome or false otherwise.*/


lass Solution {
  ListNode* reverseList(ListNode* head) {
     ListNode* newhead=NULL;
     while(head != NULL){
         ListNode* next=head->next;
         head->next=newhead;
         newhead=head;
         head=next;
     }
     return newhead;
      }
    
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL||head->next==NULL)
        {
            return true;
        }
     
      ListNode* fast=head;
      ListNode* slow=head;
      while(fast->next !=NULL && fast->next->next != NULL){
          fast=fast->next->next;
          slow=slow->next;
      }
      slow->next=reverseList(slow->next);
      slow=slow->next;
      while(slow != NULL){
          if(head->val != slow->val)
          return false;
          slow=slow->next;
          head=head->next;
      }
      return true;
    }
};

 
